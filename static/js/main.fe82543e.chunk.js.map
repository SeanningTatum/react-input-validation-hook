{"version":3,"sources":["lib/index.js","index.js"],"names":["useFormValidation","initialValue","arguments","length","undefined","options","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","errors","setErrors","_useState5","_useState6","dirty","setDirty","_useState7","_useState8","isValid","setIsValid","checkForErrors","newErrors","minLength","push","concat","maxLength","required","email","test","String","toLowerCase","onBlur","onChange","event","target","render","react_default","a","createElement","_useFormValidation","_useFormValidation2","myValue","htmlFor","assign","type","map","e","key","style","color","document","getElementById"],"mappings":"kIAOe,SAASA,IAA4E,IAA1DC,EAA0DC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnC,GAAIG,EAA+BH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAAE,EACxEC,mBAASN,GAD+DO,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3FK,EAD2FH,EAAA,GACpFI,EADoFJ,EAAA,GAAAK,EAEtEN,mBAAS,IAF6DO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE3FE,EAF2FD,EAAA,GAEnFE,EAFmFF,EAAA,GAAAG,EAGxEV,oBAAS,GAH+DW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAG3FE,EAH2FD,EAAA,GAGpFE,EAHoFF,EAAA,GAAAG,EAIpEd,oBAAS,GAJ2De,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAI3FE,EAJ2FD,EAAA,GAIlFE,EAJkFF,EAAA,GAWlG,SAASG,EAAed,GACtB,IAAMe,EAAY,GAEdrB,EAAQsB,WAAahB,EAAMR,OAASE,EAAQsB,WAC9CD,EAAUE,KAAV,yBAAAC,OAAwCxB,EAAQsB,UAAhD,gBAGEtB,EAAQyB,WAAanB,EAAMR,OAASE,EAAQyB,WAC9CJ,EAAUE,KAAV,2CAAAC,OAC6CxB,EAAQyB,YAInDzB,EAAQ0B,UAA6B,IAAjBpB,EAAMR,QAC5BuB,EAAUE,KAAK,0BAGbvB,EAAQ2B,QArBD,0JACDC,KAAKC,OAoBqBvB,GApBPwB,gBAqB3BT,EAAUE,KAAK,8BAGjBZ,EAAUU,GACVF,EAAgC,IAArBE,EAAUvB,QAiBvB,MAAO,CACLY,EACA,CACEJ,QACAyB,OATJ,WACEhB,GAAS,GACTK,EAAed,IAQb0B,SAnBJ,SAAyBC,GAAY,IAC3B3B,EAAU2B,EAAMC,OAAhB5B,MACRC,EAASD,GAELQ,GACFM,EAAed,KAgBjBY,GC3CJiB,iBAAOC,EAAAC,EAAAC,cAhBP,WAAe,IAAAC,EAEwB5C,EAAkB,WAAY,CAAC2B,UAAW,EAAGG,UAAW,EAAGC,UAAU,IAF7Fc,EAAApC,OAAAC,EAAA,EAAAD,CAAAmC,EAAA,GAEJ7B,EAFI8B,EAAA,GAEIC,EAFJD,EAAA,GAEatB,EAFbsB,EAAA,GAIX,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,IAAf,mBAEAN,EAAAC,EAAAC,cAAA,QAAAlC,OAAAuC,OAAA,CAAOC,KAAK,QAAWH,IACvBL,EAAAC,EAAAC,cAAA,SAAIpB,EAAU,iBAAmB,oBAEhCR,EAAOmC,IAAI,SAAAC,GAAC,OAAIV,EAAAC,EAAAC,cAAA,KAAGS,IAAKD,EAAGE,MAAO,CAACC,MAAO,QAASH,OAKzD,MAASI,SAASC,eAAe","file":"static/js/main.fe82543e.chunk.js","sourcesContent":["// @flow\n\nimport {useState} from \"react\";\n\nimport type {Options, returnValue} from './interfaces'\n\n\nexport default function useFormValidation(initialValue: string = '', options: Options): returnValue {\n  const [value, setValue] = useState(initialValue);\n  const [errors, setErrors] = useState([]);\n  const [dirty, setDirty] = useState(false);\n  const [isValid, setIsValid] = useState(false); \n\n  function validateEmail(email: string) {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n\n  function checkForErrors(value: string) {\n    const newErrors = [];\n\n    if (options.minLength && value.length < options.minLength) {\n      newErrors.push(`You need a minimum of ${options.minLength} characters`);\n    }\n    \n    if (options.maxLength && value.length > options.maxLength) {\n      newErrors.push(\n        `You have exceeded the max characters of ${options.maxLength}`\n      );\n    }\n\n    if (options.required && value.length === 0) {\n      newErrors.push(\"This field is required\");\n    }\n\n    if (options.email && !validateEmail(value)) {\n      newErrors.push(\"Please enter a valid email\");\n    }\n\n    setErrors(newErrors);\n    setIsValid(newErrors.length === 0 ? true : false);\n  }\n\n  function onChangeHandler(event: any) {\n    const { value } = event.target;\n    setValue(value);\n\n    if (dirty) {\n      checkForErrors(value);\n    }\n  }\n\n  function onBlurHandler() {\n    setDirty(true);\n    checkForErrors(value);\n  }\n\n  return [\n    errors, \n    {\n      value,\n      onBlur: onBlurHandler,\n      onChange: onChangeHandler\n    },\n    isValid\n  ]\n}","// Import package\nimport React from 'react'\nimport {render} from 'react-dom'\nimport useFormValidation from './lib'\n\nfunction App() {\n    // Any of these can be renamed ex: [fnErrors, firstName, isFnValid] = ...\n    const [errors, myValue, isValid] = useFormValidation('init val', {minLength: 6, maxLength: 8, required: true})\n\n    return (\n        <div>\n            <label htmlFor=\"\">Try typing here</label>\n            {/* Use spread operator here, because onChange, onBlur and value is handled for you. */}\n            <input type=\"text\" {...myValue}/>\n            <p>{isValid ? 'Value is Valid' : 'Value is Invalid'}</p>\n            {/* Print out errors */}\n            {errors.map(e => <p key={e} style={{color: 'red'}}>{e}</p>)}\n      </div>\n    )\n}\n\nrender(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}